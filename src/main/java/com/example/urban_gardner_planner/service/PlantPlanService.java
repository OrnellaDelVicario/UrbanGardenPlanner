package com.example.urban_gardner_planner.service;

import com.example.urban_gardner_planner.model.PlantPlan;
import com.example.urban_gardner_planner.repository.PlantPlanRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Service for managing plant plans.
 * This layer encapsulates the business logic for PlantPlan operations.
 */
@Service // Marks this class as a Spring service component
public class PlantPlanService {

    private final PlantPlanRepository repository; // Declare the repository dependency

    // Constructor-based dependency injection is the recommended practice
    @Autowired // Spring will automatically inject an instance of PlantPlanRepository
    public PlantPlanService(PlantPlanRepository repository) {
        this.repository = repository;
    }

    /**
     * Adds a new plant plan to the database.
     * @param plan The PlantPlan object to be added.
     * @return The saved PlantPlan object (with potential ID generated by MongoDB).
     */
    public PlantPlan addPlan(PlantPlan plan) {
        // Here you might add validation logic before saving, e.g.,
        // if (plan.getName() == null || plan.getName().isEmpty()) {
        //     throw new IllegalArgumentException("Plant name cannot be empty.");
        // }
        return repository.save(plan); // Delegates to the repository to save the plan
    }

    /**
     * Retrieves all plant plans from the database.
     * @return A list of all PlantPlan objects.
     */
    public List<PlantPlan> getAllPlans() {
        return repository.findAll(); // Delegates to the repository to find all plans
    }

    /**
     * Retrieves a single plant plan by its unique ID.
     * @param id The ID of the plant plan to retrieve.
     * @return An Optional containing the PlantPlan if found, or an empty Optional if not.
     */
    public Optional<PlantPlan> getPlanById(String id) {
        return repository.findById(id); // Delegates to the repository to find by ID
    }

    /**
     * Updates an existing plant plan.
     * @param id The ID of the plan to update.
     * @param updatedPlan The PlantPlan object with updated information.
     * @return The updated PlantPlan object.
     * @throws RuntimeException if the plan with the given ID is not found.
     */
    public PlantPlan updatePlan(String id, PlantPlan updatedPlan) {
        // First, check if the plan exists
        return repository.findById(id).map(existingPlan -> {
            // Update fields of the existing plan with values from updatedPlan
            existingPlan.setName(updatedPlan.getName());
            existingPlan.setPlantingSeason(updatedPlan.getPlantingSeason());
            existingPlan.setSunlightNeeds(updatedPlan.getSunlightNeeds());
            existingPlan.setWateringFreq(updatedPlan.getWateringFreq());
            existingPlan.setNotes(updatedPlan.getNotes());
            // Save the updated existing plan
            return repository.save(existingPlan);
        }).orElseThrow(() -> new RuntimeException("PlantPlan not found with id: " + id));
        // You might use a custom exception here instead of RuntimeException
    }


    /**
     * Deletes a plant plan by its unique ID.
     * @param id The ID of the plant plan to delete.
     */
    public void deletePlan(String id) {
        // You might want to add a check here if the plan exists before attempting to delete
        // For example:
        // if (repository.existsById(id)) {
        //     repository.deleteById(id);
        // } else {
        //     throw new RuntimeException("PlantPlan not found with id: " + id);
        // }
        repository.deleteById(id); // Delegates to the repository to delete by ID
    }
}